version: '3.8'

services:
  mongo-init:
    image: mongo
    depends_on:
      - mongo
    networks:
      - app-network
    restart: on-failure
    command: >
      bash -c "until mongosh --host mongo --eval 'print(\"Waiting for MongoDB...\")'; do
        sleep 1
      done &&
      mongosh --host mongo --eval 'rs.initiate({_id: \"rs0\", members: [{_id: 0, host: \"mongo:27017\"}]})'"
  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongo
    ports:
      - "27017:27017"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  
  main-backend:
    build:
      context: .
      dockerfile: apps/main-backend/Dockerfile
    ports:
      - "5000:5000"
    networks:
      - app-network
    env_file:
      - .env
    command: sh -c "sleep 10 && npm run start:dev:main"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

    depends_on:
      - mongo
      - mongo-init

networks:
  app-network:
    external: true

volumes:
  mongo_data:
  mongo_config:
